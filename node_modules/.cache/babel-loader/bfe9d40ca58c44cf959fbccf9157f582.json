{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\dark-mode\\\\src\\\\ThemeContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from \"react\";\nimport AppContainer from './common/containers/App';\nimport Routes from './routes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/createContext();\nconst initialState = // {\n// darkMode: false,\nJSON.parse(localStorage.getItem(\"DARKMODE\")) || LIGHTMODE; // };\n\nconst themeReducer = (mode, action) => {\n  switch (action.type) {\n    case \"LIGHTMODE\":\n      return {\n        darkMode: false\n      };\n\n    case \"DARKMODE\":\n      return {\n        darkMode: true\n      };\n\n    default:\n      return mode;\n  }\n};\n\nexport function ThemeProvider(props) {\n  _s();\n\n  const [mode, dispatch] = useReducer(themeReducer, initialState);\n  useEffect(() => {\n    localStorage.setItem(\"DARKMODE\", JSON.stringify(mode));\n  }, [mode]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      mode,\n      dispatch\n    },\n    children: /*#__PURE__*/_jsxDEV(AppContainer, {\n      children: /*#__PURE__*/_jsxDEV(Routes, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 10\n  }, this);\n}\n\n_s(ThemeProvider, \"4v3/kIBnTjrbI7854pmCK2pqt6g=\");\n\n_c = ThemeProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"sources":["C:/Users/DELL/Desktop/dark-mode/src/ThemeContext.js"],"names":["React","createContext","useReducer","AppContainer","Routes","ThemeContext","initialState","JSON","parse","localStorage","getItem","LIGHTMODE","themeReducer","mode","action","type","darkMode","ThemeProvider","props","dispatch","useEffect","setItem","stringify"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,OAAO,MAAMC,YAAY,gBAAGJ,aAAa,EAAlC;AAEP,MAAMK,YAAY,GAClB;AACE;AACAC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,KAAgDC,SAHlD,C,CAIA;;AAEA,MAAMC,YAAY,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,aAAO;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAAP;;AACF,SAAK,UAAL;AACE,aAAO;AAAEA,QAAAA,QAAQ,EAAE;AAAZ,OAAP;;AACF;AACE,aAAOH,IAAP;AANJ;AAQD,CATD;;AAWA,OAAO,SAASI,aAAT,CAAuBC,KAAvB,EAA8B;AAAA;;AACnC,QAAM,CAACL,IAAD,EAAOM,QAAP,IAAmBjB,UAAU,CAACU,YAAD,EAAeN,YAAf,CAAnC;AAEAc,EAAAA,SAAS,CAAC,MAAM;AACdX,IAAAA,YAAY,CAACY,OAAb,CAAqB,UAArB,EAAiCd,IAAI,CAACe,SAAL,CAAeT,IAAf,CAAjC;AACD,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;AAGA,sBAAO,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEA,MAAAA,IAAF;AAAQM,MAAAA;AAAR,KAA9B;AAAA,2BACL,QAAC,YAAD;AAAA,6BACK,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AADL;AAAA;AAAA;AAAA;AAAA;AADK;AAAA;AAAA;AAAA;AAAA,UAAP;AAKD;;GAXeF,a;;KAAAA,a","sourcesContent":["import React, { createContext, useReducer } from \"react\";\r\nimport AppContainer from './common/containers/App';\r\nimport Routes from './routes';\r\n\r\nexport const ThemeContext = createContext();\r\n\r\nconst initialState = \r\n// {\r\n  // darkMode: false,\r\n  JSON.parse(localStorage.getItem(\"DARKMODE\")) || LIGHTMODE;\r\n// };\r\n\r\nconst themeReducer = (mode, action) => {\r\n  switch (action.type) {\r\n    case \"LIGHTMODE\":\r\n      return { darkMode: false };\r\n    case \"DARKMODE\":\r\n      return { darkMode: true };\r\n    default:\r\n      return mode;\r\n  }\r\n};\r\n\r\nexport function ThemeProvider(props) {\r\n  const [mode, dispatch] = useReducer(themeReducer, initialState);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"DARKMODE\", JSON.stringify(mode));\r\n  }, [mode]);\r\n  return <ThemeContext.Provider value={{ mode, dispatch }}>\r\n    <AppContainer>\r\n         <Routes />\r\n      </AppContainer>\r\n    </ThemeContext.Provider>;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}